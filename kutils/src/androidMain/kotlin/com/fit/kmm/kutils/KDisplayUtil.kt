package com.fit.kmm.kutilsimport android.app.Activityimport android.content.Contextimport android.content.res.Resourcesimport android.graphics.Pointimport android.os.Buildimport android.provider.Settingsimport android.util.DisplayMetricsimport android.view.KeyCharacterMapimport android.view.KeyEventimport android.view.ViewConfigurationimport android.view.ViewGroupimport android.view.WindowManagerclass KDisplayUtil {    companion object {        private const val STATUS_BAR_HEIGHT = "status_bar_height"        private const val SHOW_NAV_BAR_RES_NAME = "config_showNavigationBar"        private const val NAVIGATION = "navigationBarBackground"        private const val NAV_BAR_HEIGHT_RES_NAME = "navigation_bar_height"        private const val NAV_BAR_HEIGHT_LANDSCAPE_RES_NAME = "navigation_bar_height_landscape"        @JvmStatic        fun checkNavigationBarShow(context: Context): Boolean {            var hasNavigationBar = false            val rs = context.resources            val id = rs.getIdentifier("config_showNavigationBar", "bool", "android")            if (id > 0) {                hasNavigationBar = rs.getBoolean(id)            }            try {                val systemPropertiesClass = Class.forName("android.os.SystemProperties")                val m = systemPropertiesClass.getMethod("get", String::class.java)                val navBarOverride = m.invoke(systemPropertiesClass, "qemu.hw.mainkeys") as String                //判断是否隐藏了底部虚拟导航                val navigationBarIsMin: Int = if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {                    Settings.System.getInt(                        context.contentResolver,                        "navigationbar_is_min", 0                    )                } else {                    Settings.Global.getInt(                        context.contentResolver,                        "navigationbar_is_min", 0                    )                }                if ("1" == navBarOverride || 1 == navigationBarIsMin) {                    hasNavigationBar = false                } else if ("0" == navBarOverride) {                    hasNavigationBar = true                }            } catch (e: Exception) {            }            return hasNavigationBar        }        @JvmStatic        fun isFlymeOS7NavBarShow(): Boolean {            val displayId: String? = getSystemProperty("ro.build.display.id", "")            return if ("Flyme 7.1.1.4A" == displayId || "Flyme 7.3.0.0A" == displayId) {                // mBack模式                if ("1" == getSystemProperty(                        "persist.sys.mz_mback_nav",                        "0"                    ) && "0" == getSystemProperty("persist.sys.mz_mainkeys", "0")                ) {                    true                } else "0" == getSystemProperty(                    "persist.sys.mz_mback_nav",                    "0"                ) && "0" == getSystemProperty("persist.sys.mz_mback_nav", "0")            } else false        }        @JvmStatic        fun getSystemProperty(key: String?, defaultValue: String?): String? {            try {                val clz = Class.forName("android.os.SystemProperties")                val get = clz.getMethod("get", String::class.java, String::class.java)                return get.invoke(clz, key, defaultValue) as String            } catch (e: Throwable) {                e.printStackTrace()            }            return defaultValue        }        private var mhasNavBar = -1        private var sNavBarOverride: String? = null        @JvmStatic        fun hasNavBar(context: Context): Boolean {            if (mhasNavBar != -1) {                return mhasNavBar == 1            }            var hasNavbar = false            val res = context.resources            val resourceId = res.getIdentifier(SHOW_NAV_BAR_RES_NAME, "bool", "android")            if (resourceId != 0) {                hasNavbar = res.getBoolean(resourceId)                // check override flag (see static block)                if ("1" == sNavBarOverride) {                    hasNavbar = false                } else if ("0" == sNavBarOverride) {                    hasNavbar = true                }            } else { // fallback                if (Build.VERSION.SDK_INT >= 14) {                    hasNavbar = !ViewConfiguration.get(context).hasPermanentMenuKey()                }            }            //缓存下状态，防止多次获取值            mhasNavBar = if (hasNavbar) {                1            } else {                0            }            return hasNavbar        }        // 该方法需要在View完全被绘制出来之后调用，否则判断不了        //在比如 onWindowFocusChanged（）方法中可以得到正确的结果        @JvmStatic        fun isNavigationBarExist(activity: Activity): Boolean {            val vp = activity.window.decorView as ViewGroup            for (i in 0 until vp.childCount) {                vp.getChildAt(i).context.packageName                if (vp.getChildAt(i).id != -1 && NAVIGATION == activity.resources.getResourceEntryName(                        vp.getChildAt(i).id                    )                ) {                    return true                }            }            return false        }        @JvmStatic        fun isNavigationBarShow(activity: Activity): Boolean {            return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {                val display = activity.windowManager.defaultDisplay                val size = Point()                val realSize = Point()                display.getSize(size)                display.getRealSize(realSize)                realSize.y != size.y            } else {                val menu = ViewConfiguration.get(activity).hasPermanentMenuKey()                val back = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK)                !menu && !back            }        }        private var mInPortrait = true        @JvmStatic        fun getNavigationBarHeight(context: Context): Int {            val res = context.resources            val result = 0            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {                val key: String                key = if (mInPortrait) {                    NAV_BAR_HEIGHT_RES_NAME                } else {                    NAV_BAR_HEIGHT_LANDSCAPE_RES_NAME                }                return getInternalDimensionSize(res, key)            }            return result        }        @JvmStatic        fun getInternalDimensionSize(res: Resources, key: String): Int {            var result = 0            val resourceId = res.getIdentifier(key, "dimen", "android")            if (resourceId > 0) {                result = res.getDimensionPixelSize(resourceId)            }            return result        }        @JvmStatic        fun getDisplayMetrics(context: Context): DisplayMetrics {            val dm: DisplayMetrics?            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {                dm = DisplayMetrics()                val wm = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager                val display = wm.defaultDisplay                display.getRealMetrics(dm)            } else {                dm = context.resources.displayMetrics            }            return dm!!        }        //去掉了虚拟键的高度        @JvmStatic        fun getScreenHeight(context: Context): Int {            val dm: DisplayMetrics = getDisplayMetrics(context)            var height = dm.heightPixels            if (context is Activity) {                val hasNavBar = (hasNavBar(context) && isNavigationBarExist(                    context                ) || isFlymeOS7NavBarShow())                if (hasNavBar) {                    val navbarHeight = getNavigationBarHeight(context) as Int                    height -= navbarHeight                }            }            return height        }        @JvmStatic        fun getScreenWidth(context: Context): Int {            val dm: DisplayMetrics = getDisplayMetrics(context)            return dm.widthPixels        }        /**         * 获取状态栏高度         */        private var statusHeight: Int = -1        @JvmStatic        fun getStatusBarHeight(context: Context): Int {            if (statusHeight == -1) {                var result = 0                val resources = context.resources                val resourceId =                    resources.getIdentifier(STATUS_BAR_HEIGHT, "dimen", "android")                if (resourceId > 0) {                    result = resources.getDimensionPixelSize(resourceId)                }                val density = resources.displayMetrics.density                var rate = density / resources.displayMetrics.density                if (rate <= 0) {                    rate = 1f                }                result = if (result <= 0) {                    Math.round(25 * rate * density)                } else {                    //对字体大小设置后，会修改density;初始系统的density/修改字体后写入到系统的                    Math.ceil((result * rate + 0.5f).toDouble()).toInt()                }                statusHeight = result            }            return statusHeight        }    }}