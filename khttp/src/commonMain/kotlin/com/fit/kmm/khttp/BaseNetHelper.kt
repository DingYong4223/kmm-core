package com.fit.kmm.khttpimport com.fit.kmm.khttp.ui.IKLoadingimport com.fit.kmm.khttp.ui.IKToastimport com.fit.kmm.kutils.KWebHelperimport kotlin.collections.set/** * NetHelper base class. used for android and ios nethelper class. * @author delanding * */abstract class BaseNetHelper: INetHelper {    companion object {        const val RET_SUCCESS = 0        const val RET_FAIL = -1        const val METHOD_GET = "get"        const val METHOD_POST = "post"    }    protected var loading: IKLoading? = null  //是否显示loading弹框，不为空时表示显示    protected var toast: IKToast? = null  //网络失败时是否异常提示    protected val reqHeader: MutableMap<String, String> = hashMapOf()    protected var timeout: Long = 60 * 1000L //默认请求超时为1分钟    override fun withTimeout(to: Long) = this.apply {        this.timeout = to    }    override fun withLoading(l: IKLoading?) = this.apply {        this.loading = l    }    override fun withErrorToast(b: IKToast?) = this.apply {        this.toast = b    }    /**     * set the http request header, only post request used.     * @param header the header     * */    override fun withHeader(header: Map<String, String>) = this.apply {        reqHeader.putAll(header)    }    /**     * 添加cookie到header中     **/    override fun withCookie(cookie: Map<String, Any>) = this.apply {        reqHeader["Cookie"] = KWebHelper.getWebCookie(cookie)    }    /**     * http get request     * @param url the url which will be request.     * @param iNet callback of the request     * */    abstract override fun get(url: String, iNet: INet)    /**     * http post request     * @param url the url which will be request.     * @param iNet callback of the request     * */    abstract override fun jsonStrPost(url: String, jsonMap: Map<String, Any>, iNet: INet)    /**     * http post request     * @param url the url which will be request.     * @param iNet callback of the request     * */    abstract override fun jsonPost(url: String, params: Map<String, Any>, iNet: INet)    /**     * http post request with Content-Type: application/x-www-form-urlencoded     * @param url the url which will be request.     * @param iNet callback of the request     * */    abstract override fun formPost(url: String, params: Map<String, Any>, iNet: INet)    /**     * http get request, simply for ios call.     * @param url the url which will be request.     * @param callback callback of the request     * */    override fun get(        url: String,        callback: (            retCode: Int, header: Map<String, List<String>>,            body: String        ) -> Unit    ) = this.get(url, object : INet {        override fun back(retCode: Int, header: Map<String, List<String>>, body: String) {            callback.invoke(retCode, header, body)        }    })    /**     * http post request, simply for ios call.     * @param url the url which will be request.     * @param jsonStr json string witch will be post.     * @param callback callback of the request     * */    override fun jsonStrPost(        url: String,        jsonMap: Map<String, Any>,        callback: (            retCode: Int, header: Map<String, List<String>>,            body: String        ) -> Unit    ) = this.jsonStrPost(url, jsonMap, object : INet {        override fun back(retCode: Int, header: Map<String, List<String>>, body: String) {            callback.invoke(retCode, header, body)        }    })    /**     * http post request, simply for ios call.     * @param url the url which will be request.     * @param params params which will be post.     * */    override fun jsonPost(        url: String,        params: Map<String, Any>,        callback: (            retCode: Int, header: Map<String, List<String>>,            body: String        ) -> Unit    ) = this.jsonPost(url, params, object : INet {        override fun back(retCode: Int, header: Map<String, List<String>>, body: String) {            callback.invoke(retCode, header, body)        }    })    /**     * http get request for bytes     * @param url the url which will be request.     * @param callback callback of the request, contains bytes of the request.     * */    abstract override fun download(url: String, callback: INetDownload)}