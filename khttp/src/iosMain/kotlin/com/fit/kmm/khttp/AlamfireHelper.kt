package com.fit.kmm.khttpimport cocoapods.KNetwork.KAlamofireimport com.fit.kmm.khttp.ui.IKLoadingimport com.fit.kmm.khttp.ui.IKToastimport com.fit.kmm.kutils.toByteArrayimport com.fit.kmm.thread.ioScopeimport com.fit.kmm.thread.uiScopeimport kotlinx.coroutines.launchimport platform.Foundation.NSDataimport platform.darwin.NSInteger/** * Net request helper for ios. * this class use alamofire to send request. * */class AlamfireHelper : BaseNetHelper() {    companion object {        fun with() = AlamfireHelper()        private val alamofire: KAlamofire = KAlamofire()    }    private val mParams: MutableMap<String, Any> = mutableMapOf()    override fun withTimeout(to: Long) = this.apply {        super.withTimeout(to)    }    override fun withLoading(l: IKLoading?) = this.apply {        super.withLoading(l)    }    override fun withErrorToast(b: IKToast?) = this.apply {        super.withErrorToast(b)    }    /**     * set the http request header, only post request used.     * @param header the header     * */    override fun withHeader(header: Map<String, String>) = this.apply {        super.withHeader(header)    }    /**     * 添加cookie到header中     **/    override fun withCookie(cookie: Map<String, Any>) = this.apply {        super.withCookie(cookie)    }    /**     * http post request     * @param url the url which will be request.     * @param iNet callback of the request     * */    override fun jsonPost(url: String, params: Map<String, Any>, iNet: INet) {        alamofire.withEncoding("json")        mParams.clear()        mParams.putAll(params)        start(url, METHOD_POST, iNet)    }    /**     * http post request, not support in ios     * @param url the url which will be request.     * @param iNet callback of the request     * */    override fun jsonStrPost(url: String, jsonMap: Map<String, Any>, iNet: INet) {        mParams.clear()        mParams.putAll(jsonMap)        start(url, METHOD_POST, iNet)    }    /**     * http post request with Content-Type: application/x-www-form-urlencoded     * @param url the url which will be request.     * @param iNet callback of the request     * */    override fun formPost(url: String, params: Map<String, Any>, iNet: INet) {        mParams.clear()        mParams.putAll(params)        start(url, METHOD_POST, iNet)    }    /**     * http get request     * @param url the url which will be request.     * @param iNet callback of the request     * */    override fun get(url: String, iNet: INet) = start(url, METHOD_GET, iNet)    /**     * http get/post request     * @param url the url which will be request.     * @param iNet callback of the request     * */    private fun start(url: String, method: String, iNet: INet) {        loading?.show()        ioScope.launch {            alamofire.apply {                //withTimeout(timeout) //IOS timeout not implement yet                withHeader(reqHeader.toMap())                withMethod(method)                startWithUrl(url = url, inet = fun(ret_code: NSInteger, header: Map<Any?, *>?, ret_msg: String?) {                    uiScope.launch {                        loading?.dismiss()                        iNet.back(ret_code.toInt(), header as Map<String, List<String>>,"$ret_msg")                    }                })            }        }    }    /**     * http get request for bytes     * @param url the url which will be request.     * @param inet callback of the request, contains bytes of the request.     * */    @kotlinx.cinterop.BetaInteropApi    @kotlinx.cinterop.ExperimentalForeignApi    override fun download(url: String, inet: INetDownload) = this.iosDownload(url) { retCode, header, nsData ->        if(null != nsData) {            inet.back(retCode, header, nsData.toByteArray())        } else {            inet.back(retCode, header, byteArrayOf())        }    }    /**     * http download request for bytes only for IOS     * @param url the url which will be request.     * @param callback callback data, contains bytes of the request.     * */    fun iosDownload(url: String, callback: (        retCode: Int, header: Map<String, List<String>>,        nsData: NSData?) -> Unit) {        loading?.show()        ioScope.launch {            alamofire.apply {                //withTimeout(timeout) //IOS timeout not implement yet                withMethod(METHOD_GET)                withHeader(reqHeader.toMap())                withParameter(null)                reqWithRurl(rurl = url, rinet = fun(ret_code: NSInteger, header: Map<Any?, *>?, data: NSData?) {                    uiScope.launch {                        loading?.dismiss()                        if(null != data) {                            callback.invoke(ret_code.toInt(), header as Map<String, List<String>>, data)                        } else {                            callback.invoke(ret_code.toInt(), header as Map<String, List<String>>, null)                        }                    }                })            }        }    }}